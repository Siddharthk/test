%!PS-Adobe-3.0 EPSF-3.0
%%Creator: (ImageMagick)
%%Title: (13.eps)
%%CreationDate: (2013-12-07T20:17:54+06:00)
%%BoundingBox: 0 0 186 53
%%HiResBoundingBox: 0 0 186 53
%%DocumentData: Clean7Bit
%%LanguageLevel: 1
%%Pages: 1
%%EndComments

%%BeginDefaults
%%EndDefaults

%%BeginProlog
%
% Display a color image.  The image is displayed in color on
% Postscript viewers or printers that support color, otherwise
% it is displayed as grayscale.
%
/DirectClassPacket
{
  %
  % Get a DirectClass packet.
  %
  % Parameters:
  %   red.
  %   green.
  %   blue.
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile color_packet readhexstring pop pop
  compression 0 eq
  {
    /number_pixels 3 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add 3 mul def
  } ifelse
  0 3 number_pixels 1 sub
  {
    pixels exch color_packet putinterval
  } for
  pixels 0 number_pixels getinterval
} bind def

/DirectClassImage
{
  %
  % Display a DirectClass image.
  %
  systemdict /colorimage known
  {
    columns rows 8
    [
      columns 0 0
      rows neg 0 rows
    ]
    { DirectClassPacket } false 3 colorimage
  }
  {
    %
    % No colorimage operator;  convert to grayscale.
    %
    columns rows 8
    [
      columns 0 0
      rows neg 0 rows
    ]
    { GrayDirectClassPacket } image
  } ifelse
} bind def

/GrayDirectClassPacket
{
  %
  % Get a DirectClass packet;  convert to grayscale.
  %
  % Parameters:
  %   red
  %   green
  %   blue
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile color_packet readhexstring pop pop
  color_packet 0 get 0.299 mul
  color_packet 1 get 0.587 mul add
  color_packet 2 get 0.114 mul add
  cvi
  /gray_packet exch def
  compression 0 eq
  {
    /number_pixels 1 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add def
  } ifelse
  0 1 number_pixels 1 sub
  {
    pixels exch gray_packet put
  } for
  pixels 0 number_pixels getinterval
} bind def

/GrayPseudoClassPacket
{
  %
  % Get a PseudoClass packet;  convert to grayscale.
  %
  % Parameters:
  %   index: index into the colormap.
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile byte readhexstring pop 0 get
  /offset exch 3 mul def
  /color_packet colormap offset 3 getinterval def
  color_packet 0 get 0.299 mul
  color_packet 1 get 0.587 mul add
  color_packet 2 get 0.114 mul add
  cvi
  /gray_packet exch def
  compression 0 eq
  {
    /number_pixels 1 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add def
  } ifelse
  0 1 number_pixels 1 sub
  {
    pixels exch gray_packet put
  } for
  pixels 0 number_pixels getinterval
} bind def

/PseudoClassPacket
{
  %
  % Get a PseudoClass packet.
  %
  % Parameters:
  %   index: index into the colormap.
  %   length: number of pixels minus one of this color (optional).
  %
  currentfile byte readhexstring pop 0 get
  /offset exch 3 mul def
  /color_packet colormap offset 3 getinterval def
  compression 0 eq
  {
    /number_pixels 3 def
  }
  {
    currentfile byte readhexstring pop 0 get
    /number_pixels exch 1 add 3 mul def
  } ifelse
  0 3 number_pixels 1 sub
  {
    pixels exch color_packet putinterval
  } for
  pixels 0 number_pixels getinterval
} bind def

/PseudoClassImage
{
  %
  % Display a PseudoClass image.
  %
  % Parameters:
  %   class: 0-PseudoClass or 1-Grayscale.
  %
  currentfile buffer readline pop
  token pop /class exch def pop
  class 0 gt
  {
    currentfile buffer readline pop
    token pop /depth exch def pop
    /grays columns 8 add depth sub depth mul 8 idiv string def
    columns rows depth
    [
      columns 0 0
      rows neg 0 rows
    ]
    { currentfile grays readhexstring pop } image
  }
  {
    %
    % Parameters:
    %   colors: number of colors in the colormap.
    %   colormap: red, green, blue color packets.
    %
    currentfile buffer readline pop
    token pop /colors exch def pop
    /colors colors 3 mul def
    /colormap colors string def
    currentfile colormap readhexstring pop pop
    systemdict /colorimage known
    {
      columns rows 8
      [
        columns 0 0
        rows neg 0 rows
      ]
      { PseudoClassPacket } false 3 colorimage
    }
    {
      %
      % No colorimage operator;  convert to grayscale.
      %
      columns rows 8
      [
        columns 0 0
        rows neg 0 rows
      ]
      { GrayPseudoClassPacket } image
    } ifelse
  } ifelse
} bind def

/DisplayImage
{
  %
  % Display a DirectClass or PseudoClass image.
  %
  % Parameters:
  %   x & y translation.
  %   x & y scale.
  %   label pointsize.
  %   image label.
  %   image columns & rows.
  %   class: 0-DirectClass or 1-PseudoClass.
  %   compression: 0-none or 1-RunlengthEncoded.
  %   hex color packets.
  %
  gsave
  /buffer 512 string def
  /byte 1 string def
  /color_packet 3 string def
  /pixels 768 string def

  currentfile buffer readline pop
  token pop /x exch def
  token pop /y exch def pop
  x y translate
  currentfile buffer readline pop
  token pop /x exch def
  token pop /y exch def pop
  currentfile buffer readline pop
  token pop /pointsize exch def pop
  /Times-Roman findfont pointsize scalefont setfont
  x y scale
  currentfile buffer readline pop
  token pop /columns exch def
  token pop /rows exch def pop
  currentfile buffer readline pop
  token pop /class exch def pop
  currentfile buffer readline pop
  token pop /compression exch def pop
  class 0 gt { PseudoClassImage } { DirectClassImage } ifelse
} bind def
%%EndProlog
%%Page:  1 1
%%PageBoundingBox: 0 0 186 53
userdict begin
DisplayImage
0 0
186 53
12.000000
186 53
1
1
1
1
00000000000000000000000000000000000000000000000001FFFF800000000000000000000000
000000000000000000020000700000000000000000000000000000000000000000030000180000
000000000000000000000000000000000000010000060000000000000000000000000000001FFF
FC000000800003000000000007000307F000001FF8002000030000008000010000FE007FF90000
F8000000200C00300000C00000400E0080038380C000800C001000001004001800006000004013
00C00C00E080038006003000001804000C00003000004011804018002040060002006000000404
000400001800004010C06030001040080001004000000402000403E00800004010402060001840
180001008000000402000406300C00004020402040700820100001008000000402000404180400
0040202020C18C0C20100001008000000402000404080400004020202081040420200001008000
000C020004040C0400004020202183040420200001008000000803000404040400004020201102
04062020000100800000180100080608020000402020130204024010000200C000003001801803
B803800080202012020C01C01FFFFE007FFFFFC0007FF000400000008020202206180000000000
000000000000000000000000008020202204180000000000000000000000000000000000008060
202204100100000000000000000000000000000000008040202204100100000000000000000000
000000000000008040202204100100000000000000000000000000000000008040402604100100
000000000000000000000000000000008040402404080100000000000000000000000000000000
008040402404080300000000000000000000000000000000008040402404080200000000000000
000000000000000000008040402404080200000000000000000000000000000000008040404404
080200000000000000000000000000000000008040404404080200000000000000000000000000
000000008040404404080200000000000000000000000000000000010040404404080200000000
0000000000000000000000000100404044040802000000000000000000000000000000000100C0
404404080200000000000000000000000000000000010080404404080200000000000000000000
00000000000001008040440408040000000000000000000000000000000001008080C404080400
000000000000000000000000000000010080808404180400000000000000000000000000000000
010081808404100C00000000000000000000000000000000030083018406300800000000000000
000000000000000000020086010201C018000000000000000000000000000000000200FC010200
001000000000000000000000000000000000020020020300003000000000000000000000000000
0000000200000601800060000000000000000000000000000000000600000C00C000C000000000
0000000000000000000000000400001800301180000000000000000000000000000000000C0000
30000FF20000000000000000000000000000000000180000E00000040000000000000000000000
00000000000010000380000004000000000000000000000000000000000010003C000000040000
0000000000000000000000000000000FFFC0000000040000000000000000000000000000000000
000000000000000000000000000000000000000000000000
end
%%PageTrailer
%%Trailer
%%EOF
